=begin
#Siteimprove API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module SiteimproveAPIClient
  class A11YNextGenApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get issues from accessibility
    # Retrieves the issues from accessibility, per the issue kind; how many pages that have the Issue; how many occurrences of the Issue exist on site in total; it's Conformance and Difficulty rating.
    # @param site_id [Integer] Id for specific site.
    # @param issue_kind [String] Kind of issue state requested (potential, passed or confirmed issues)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :conformance Conformance filter
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [IssueList]
    def sites_site_id_a11y_issue_kinds_issue_kind_issues_get(site_id, issue_kind, opts = {})
      data, _status_code, _headers = sites_site_id_a11y_issue_kinds_issue_kind_issues_get_with_http_info(site_id, issue_kind, opts)
      data
    end

    # Get issues from accessibility
    # Retrieves the issues from accessibility, per the issue kind; how many pages that have the Issue; how many occurrences of the Issue exist on site in total; it&#39;s Conformance and Difficulty rating.
    # @param site_id [Integer] Id for specific site.
    # @param issue_kind [String] Kind of issue state requested (potential, passed or confirmed issues)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :conformance Conformance filter
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(IssueList, Integer, Hash)>] IssueList data, response status code and response headers
    def sites_site_id_a11y_issue_kinds_issue_kind_issues_get_with_http_info(site_id, issue_kind, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_get"
      end
      # verify the required parameter 'issue_kind' is set
      if @api_client.config.client_side_validation && issue_kind.nil?
        fail ArgumentError, "Missing the required parameter 'issue_kind' when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_get"
      end
      # verify enum value
      allowable_values = ["confirmed", "potential", "passed"]
      if @api_client.config.client_side_validation && !allowable_values.include?(issue_kind)
        fail ArgumentError, "invalid value for \"issue_kind\", must be one of #{allowable_values}"
      end
      allowable_values = []
      if @api_client.config.client_side_validation && opts[:'conformance'] && !opts[:'conformance'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"conformance\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/a11y/issue_kinds/{issue_kind}/issues'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'issue_kind' + '}', CGI.escape(issue_kind.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'conformance'] = @api_client.build_collection_param(opts[:'conformance'], :csv) if !opts[:'conformance'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssueList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: A11YNextGenApi#sites_site_id_a11y_issue_kinds_issue_kind_issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with this issue from accessibility
    # Retrieves pages with this issue from accessibility, per issue kind; how many occurrences of given issue exist on the page.
    # @param site_id [Integer] Id for specific site.
    # @param issue_kind [String] Kind of issue state requested (potential, passed or confirmed issues)
    # @param issue_id [Integer] Id of the issue to display
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :conformance Conformance filter
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageWithIssueList]
    def sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_pages_get(site_id, issue_kind, issue_id, opts = {})
      data, _status_code, _headers = sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_pages_get_with_http_info(site_id, issue_kind, issue_id, opts)
      data
    end

    # Get pages with this issue from accessibility
    # Retrieves pages with this issue from accessibility, per issue kind; how many occurrences of given issue exist on the page.
    # @param site_id [Integer] Id for specific site.
    # @param issue_kind [String] Kind of issue state requested (potential, passed or confirmed issues)
    # @param issue_id [Integer] Id of the issue to display
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :conformance Conformance filter
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageWithIssueList, Integer, Hash)>] PageWithIssueList data, response status code and response headers
    def sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_pages_get_with_http_info(site_id, issue_kind, issue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_pages_get"
      end
      # verify the required parameter 'issue_kind' is set
      if @api_client.config.client_side_validation && issue_kind.nil?
        fail ArgumentError, "Missing the required parameter 'issue_kind' when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_pages_get"
      end
      # verify enum value
      allowable_values = ["confirmed", "potential", "passed"]
      if @api_client.config.client_side_validation && !allowable_values.include?(issue_kind)
        fail ArgumentError, "invalid value for \"issue_kind\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_pages_get"
      end
      allowable_values = []
      if @api_client.config.client_side_validation && opts[:'conformance'] && !opts[:'conformance'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"conformance\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/a11y/issue_kinds/{issue_kind}/issues/{issue_id}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'issue_kind' + '}', CGI.escape(issue_kind.to_s)).sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'conformance'] = @api_client.build_collection_param(opts[:'conformance'], :csv) if !opts[:'conformance'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithIssueList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: A11YNextGenApi#sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get progress for this issue from accessibility
    # Retrieves issue progress for accessibility. Returns a list of how many many occurrences of this issue are present on the site and how many pages in total the site has had over time.
    # @param site_id [Integer] Id for specific site.
    # @param issue_kind [String] Kind of issue state requested (potential, passed or confirmed issues)
    # @param issue_id [Integer] Id of the issue to display
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [A11YSingleIssueHistoryValueList]
    def sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_progress_history_get(site_id, issue_kind, issue_id, opts = {})
      data, _status_code, _headers = sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_progress_history_get_with_http_info(site_id, issue_kind, issue_id, opts)
      data
    end

    # Get progress for this issue from accessibility
    # Retrieves issue progress for accessibility. Returns a list of how many many occurrences of this issue are present on the site and how many pages in total the site has had over time.
    # @param site_id [Integer] Id for specific site.
    # @param issue_kind [String] Kind of issue state requested (potential, passed or confirmed issues)
    # @param issue_id [Integer] Id of the issue to display
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(A11YSingleIssueHistoryValueList, Integer, Hash)>] A11YSingleIssueHistoryValueList data, response status code and response headers
    def sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_progress_history_get_with_http_info(site_id, issue_kind, issue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_progress_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_progress_history_get"
      end
      # verify the required parameter 'issue_kind' is set
      if @api_client.config.client_side_validation && issue_kind.nil?
        fail ArgumentError, "Missing the required parameter 'issue_kind' when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_progress_history_get"
      end
      # verify enum value
      allowable_values = ["confirmed", "potential", "passed"]
      if @api_client.config.client_side_validation && !allowable_values.include?(issue_kind)
        fail ArgumentError, "invalid value for \"issue_kind\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_progress_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_progress_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_progress_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_progress_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/a11y/issue_kinds/{issue_kind}/issues/{issue_id}/progress/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'issue_kind' + '}', CGI.escape(issue_kind.to_s)).sub('{' + 'issue_id' + '}', CGI.escape(issue_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'A11YSingleIssueHistoryValueList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_progress_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: A11YNextGenApi#sites_site_id_a11y_issue_kinds_issue_kind_issues_issue_id_progress_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pages with issues from accessibility
    # Retrieves pages from accessibility with issues per issue kind; how many issues there are on the page; how many occurrences of issues there are on the page in total.
    # @param site_id [Integer] Id for specific site.
    # @param issue_kind [String] Kind of issue state requested (potential, passed or confirmed issues)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :conformance Conformance filter
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [PageWithIssuesList]
    def sites_site_id_a11y_issue_kinds_issue_kind_pages_get(site_id, issue_kind, opts = {})
      data, _status_code, _headers = sites_site_id_a11y_issue_kinds_issue_kind_pages_get_with_http_info(site_id, issue_kind, opts)
      data
    end

    # Get pages with issues from accessibility
    # Retrieves pages from accessibility with issues per issue kind; how many issues there are on the page; how many occurrences of issues there are on the page in total.
    # @param site_id [Integer] Id for specific site.
    # @param issue_kind [String] Kind of issue state requested (potential, passed or confirmed issues)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :conformance Conformance filter
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(PageWithIssuesList, Integer, Hash)>] PageWithIssuesList data, response status code and response headers
    def sites_site_id_a11y_issue_kinds_issue_kind_pages_get_with_http_info(site_id, issue_kind, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_pages_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_pages_get"
      end
      # verify the required parameter 'issue_kind' is set
      if @api_client.config.client_side_validation && issue_kind.nil?
        fail ArgumentError, "Missing the required parameter 'issue_kind' when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_pages_get"
      end
      # verify enum value
      allowable_values = ["confirmed", "potential", "passed"]
      if @api_client.config.client_side_validation && !allowable_values.include?(issue_kind)
        fail ArgumentError, "invalid value for \"issue_kind\", must be one of #{allowable_values}"
      end
      allowable_values = []
      if @api_client.config.client_side_validation && opts[:'conformance'] && !opts[:'conformance'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"conformance\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_pages_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_pages_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_pages_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/a11y/issue_kinds/{issue_kind}/pages'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'issue_kind' + '}', CGI.escape(issue_kind.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'conformance'] = @api_client.build_collection_param(opts[:'conformance'], :csv) if !opts[:'conformance'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PageWithIssuesList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_pages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: A11YNextGenApi#sites_site_id_a11y_issue_kinds_issue_kind_pages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get issues on this page from accessibility
    # Retrieves issues for a give page from accessibility, per issue kind; occurrences of the Issue, Conformance of the Issue and its Difficulty rating.
    # @param site_id [Integer] Id for specific site.
    # @param issue_kind [String] Kind of issue state requested (potential, passed or confirmed issues)
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :conformance Conformance filter
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [IssueOnPageList]
    def sites_site_id_a11y_issue_kinds_issue_kind_pages_page_id_issues_get(site_id, issue_kind, page_id, opts = {})
      data, _status_code, _headers = sites_site_id_a11y_issue_kinds_issue_kind_pages_page_id_issues_get_with_http_info(site_id, issue_kind, page_id, opts)
      data
    end

    # Get issues on this page from accessibility
    # Retrieves issues for a give page from accessibility, per issue kind; occurrences of the Issue, Conformance of the Issue and its Difficulty rating.
    # @param site_id [Integer] Id for specific site.
    # @param issue_kind [String] Kind of issue state requested (potential, passed or confirmed issues)
    # @param page_id [Integer] Id for specific page.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :conformance Conformance filter
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(IssueOnPageList, Integer, Hash)>] IssueOnPageList data, response status code and response headers
    def sites_site_id_a11y_issue_kinds_issue_kind_pages_page_id_issues_get_with_http_info(site_id, issue_kind, page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_pages_page_id_issues_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_pages_page_id_issues_get"
      end
      # verify the required parameter 'issue_kind' is set
      if @api_client.config.client_side_validation && issue_kind.nil?
        fail ArgumentError, "Missing the required parameter 'issue_kind' when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_pages_page_id_issues_get"
      end
      # verify enum value
      allowable_values = ["confirmed", "potential", "passed"]
      if @api_client.config.client_side_validation && !allowable_values.include?(issue_kind)
        fail ArgumentError, "invalid value for \"issue_kind\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'page_id' is set
      if @api_client.config.client_side_validation && page_id.nil?
        fail ArgumentError, "Missing the required parameter 'page_id' when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_pages_page_id_issues_get"
      end
      allowable_values = []
      if @api_client.config.client_side_validation && opts[:'conformance'] && !opts[:'conformance'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"conformance\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_pages_page_id_issues_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_pages_page_id_issues_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_pages_page_id_issues_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/a11y/issue_kinds/{issue_kind}/pages/{page_id}/issues'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'issue_kind' + '}', CGI.escape(issue_kind.to_s)).sub('{' + 'page_id' + '}', CGI.escape(page_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'conformance'] = @api_client.build_collection_param(opts[:'conformance'], :csv) if !opts[:'conformance'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssueOnPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"A11YNextGenApi.sites_site_id_a11y_issue_kinds_issue_kind_pages_page_id_issues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: A11YNextGenApi#sites_site_id_a11y_issue_kinds_issue_kind_pages_page_id_issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get overview of Groups for Accessibility
    # Retrieves overview of Groups for Accessibility. Returns the name of the Group; its ID; the number of pages in the group; the number of issues, potential issues, and PDF issues for pages in the Group.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :conformance Conformance filter
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [A11YGroupsList]
    def sites_site_id_a11y_overview_groups_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_a11y_overview_groups_get_with_http_info(site_id, opts)
      data
    end

    # Get overview of Groups for Accessibility
    # Retrieves overview of Groups for Accessibility. Returns the name of the Group; its ID; the number of pages in the group; the number of issues, potential issues, and PDF issues for pages in the Group.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :conformance Conformance filter
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @return [Array<(A11YGroupsList, Integer, Hash)>] A11YGroupsList data, response status code and response headers
    def sites_site_id_a11y_overview_groups_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: A11YNextGenApi.sites_site_id_a11y_overview_groups_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling A11YNextGenApi.sites_site_id_a11y_overview_groups_get"
      end
      allowable_values = []
      if @api_client.config.client_side_validation && opts[:'conformance'] && !opts[:'conformance'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"conformance\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling A11YNextGenApi.sites_site_id_a11y_overview_groups_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_overview_groups_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_overview_groups_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/a11y/overview/groups'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'conformance'] = @api_client.build_collection_param(opts[:'conformance'], :csv) if !opts[:'conformance'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'A11YGroupsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"A11YNextGenApi.sites_site_id_a11y_overview_groups_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: A11YNextGenApi#sites_site_id_a11y_overview_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get progress for all issues and occurrences from Accessibility
    # Retrieves overall issue and occurrence progress for accessibility. Returns a list of total issues and occurrences present on the site, as well as total pages present. All of the data is filterable by issue type.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [String] :issue_kind Kind of issue state requested (potential, passed or confirmed issues) (default to 'confirmed')
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [A11YHistoryValueList]
    def sites_site_id_a11y_overview_progress_history_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_a11y_overview_progress_history_get_with_http_info(site_id, opts)
      data
    end

    # Get progress for all issues and occurrences from Accessibility
    # Retrieves overall issue and occurrence progress for accessibility. Returns a list of total issues and occurrences present on the site, as well as total pages present. All of the data is filterable by issue type.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [String] :issue_kind Kind of issue state requested (potential, passed or confirmed issues) (default to 'confirmed')
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :period Period for which to retrieve data. Default is last 7 days.  A period can be a single date, a date range, or a predefined interval. Only full dates are allowed, not individual hours. Dates are in YYYYMMDD format only.  A single date YYYYMMDD will return data for that day.  A range of dates YYYYMMDD_YYYYMMDD will retrieve data for the period where the start and end date are both fully included.  A predefined interval can be one of the following (case insensitive):   now    today      yesterday    last_seven_days    last_week    last_month    this_month    this_year
    # @return [Array<(A11YHistoryValueList, Integer, Hash)>] A11YHistoryValueList data, response status code and response headers
    def sites_site_id_a11y_overview_progress_history_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: A11YNextGenApi.sites_site_id_a11y_overview_progress_history_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling A11YNextGenApi.sites_site_id_a11y_overview_progress_history_get"
      end
      allowable_values = ["confirmed", "potential", "passed"]
      if @api_client.config.client_side_validation && opts[:'issue_kind'] && !allowable_values.include?(opts[:'issue_kind'])
        fail ArgumentError, "invalid value for \"issue_kind\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling A11YNextGenApi.sites_site_id_a11y_overview_progress_history_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_overview_progress_history_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_overview_progress_history_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/a11y/overview/progress/history'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'issue_kind'] = opts[:'issue_kind'] if !opts[:'issue_kind'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'A11YHistoryValueList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"A11YNextGenApi.sites_site_id_a11y_overview_progress_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: A11YNextGenApi#sites_site_id_a11y_overview_progress_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get summary for Accessibility
    # Retrieves issue overview for accessibility, according to conformance level (A, AA, AAA, WAI-ARIA, accessibility best practices) and issue type. Items that don't contain any issues are not returned.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [IssuesByConformanceList]
    def sites_site_id_a11y_overview_summary_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_a11y_overview_summary_get_with_http_info(site_id, opts)
      data
    end

    # Get summary for Accessibility
    # Retrieves issue overview for accessibility, according to conformance level (A, AA, AAA, WAI-ARIA, accessibility best practices) and issue type. Items that don&#39;t contain any issues are not returned.
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(IssuesByConformanceList, Integer, Hash)>] IssuesByConformanceList data, response status code and response headers
    def sites_site_id_a11y_overview_summary_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: A11YNextGenApi.sites_site_id_a11y_overview_summary_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling A11YNextGenApi.sites_site_id_a11y_overview_summary_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling A11YNextGenApi.sites_site_id_a11y_overview_summary_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_overview_summary_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_overview_summary_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/a11y/overview/summary'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssuesByConformanceList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"A11YNextGenApi.sites_site_id_a11y_overview_summary_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: A11YNextGenApi#sites_site_id_a11y_overview_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get report on PDF errors from accessibility
    # Retrieves PDF documents from accessibility. Contains the PDF documents referred on the site, whether they're tagged, contains text, and their errors
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [DocumentWithErrorList]
    def sites_site_id_a11y_validation_pdfs_get(site_id, opts = {})
      data, _status_code, _headers = sites_site_id_a11y_validation_pdfs_get_with_http_info(site_id, opts)
      data
    end

    # Get report on PDF errors from accessibility
    # Retrieves PDF documents from accessibility. Contains the PDF documents referred on the site, whether they&#39;re tagged, contains text, and their errors
    # @param site_id [Integer] Id for specific site.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @option opts [String] :query Return all items that matches the specified plain text query.
    # @option opts [String] :search_in Specified query must match either url or title. (default to 'url')
    # @return [Array<(DocumentWithErrorList, Integer, Hash)>] DocumentWithErrorList data, response status code and response headers
    def sites_site_id_a11y_validation_pdfs_get_with_http_info(site_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: A11YNextGenApi.sites_site_id_a11y_validation_pdfs_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling A11YNextGenApi.sites_site_id_a11y_validation_pdfs_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling A11YNextGenApi.sites_site_id_a11y_validation_pdfs_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_validation_pdfs_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_validation_pdfs_get, must be greater than or equal to 1.'
      end

      allowable_values = ["url", "title"]
      if @api_client.config.client_side_validation && opts[:'search_in'] && !allowable_values.include?(opts[:'search_in'])
        fail ArgumentError, "invalid value for \"search_in\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sites/{site_id}/a11y/validation/pdfs'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'search_in'] = opts[:'search_in'] if !opts[:'search_in'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentWithErrorList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"A11YNextGenApi.sites_site_id_a11y_validation_pdfs_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: A11YNextGenApi#sites_site_id_a11y_validation_pdfs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get errors for specific PDF document  
    # List of errors for the PDF document
    # @param site_id [Integer] Id for specific site.
    # @param link_id [Integer] Id of a specific link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [DocumentErrorDetailsList]
    def sites_site_id_a11y_validation_pdfs_link_id_issues_get(site_id, link_id, opts = {})
      data, _status_code, _headers = sites_site_id_a11y_validation_pdfs_link_id_issues_get_with_http_info(site_id, link_id, opts)
      data
    end

    # Get errors for specific PDF document  
    # List of errors for the PDF document
    # @param site_id [Integer] Id for specific site.
    # @param link_id [Integer] Id of a specific link/URL.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(DocumentErrorDetailsList, Integer, Hash)>] DocumentErrorDetailsList data, response status code and response headers
    def sites_site_id_a11y_validation_pdfs_link_id_issues_get_with_http_info(site_id, link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: A11YNextGenApi.sites_site_id_a11y_validation_pdfs_link_id_issues_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling A11YNextGenApi.sites_site_id_a11y_validation_pdfs_link_id_issues_get"
      end
      # verify the required parameter 'link_id' is set
      if @api_client.config.client_side_validation && link_id.nil?
        fail ArgumentError, "Missing the required parameter 'link_id' when calling A11YNextGenApi.sites_site_id_a11y_validation_pdfs_link_id_issues_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling A11YNextGenApi.sites_site_id_a11y_validation_pdfs_link_id_issues_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_validation_pdfs_link_id_issues_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_validation_pdfs_link_id_issues_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/a11y/validation/pdfs/{link_id}/issues'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'link_id' + '}', CGI.escape(link_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentErrorDetailsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"A11YNextGenApi.sites_site_id_a11y_validation_pdfs_link_id_issues_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: A11YNextGenApi#sites_site_id_a11y_validation_pdfs_link_id_issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get HTML pages referring to specific PDF document  
    # List of HTML pages on the site that refers to the PDF document  
    # @param site_id [Integer] Id for specific site.
    # @param pdf_id [Integer] id of the PDF document
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [ReferringPageList]
    def sites_site_id_a11y_validation_pdfs_pdf_id_pages_using_pdf_get(site_id, pdf_id, opts = {})
      data, _status_code, _headers = sites_site_id_a11y_validation_pdfs_pdf_id_pages_using_pdf_get_with_http_info(site_id, pdf_id, opts)
      data
    end

    # Get HTML pages referring to specific PDF document  
    # List of HTML pages on the site that refers to the PDF document  
    # @param site_id [Integer] Id for specific site.
    # @param pdf_id [Integer] id of the PDF document
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :group_id Id for specific group.
    # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
    # @option opts [Integer] :page Page number to show when more than one page in paged output. (default to 1)
    # @option opts [Integer] :page_size Number of items/records per page in paged output. (default to 10)
    # @return [Array<(ReferringPageList, Integer, Hash)>] ReferringPageList data, response status code and response headers
    def sites_site_id_a11y_validation_pdfs_pdf_id_pages_using_pdf_get_with_http_info(site_id, pdf_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: A11YNextGenApi.sites_site_id_a11y_validation_pdfs_pdf_id_pages_using_pdf_get ...'
      end
      # verify the required parameter 'site_id' is set
      if @api_client.config.client_side_validation && site_id.nil?
        fail ArgumentError, "Missing the required parameter 'site_id' when calling A11YNextGenApi.sites_site_id_a11y_validation_pdfs_pdf_id_pages_using_pdf_get"
      end
      # verify the required parameter 'pdf_id' is set
      if @api_client.config.client_side_validation && pdf_id.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_id' when calling A11YNextGenApi.sites_site_id_a11y_validation_pdfs_pdf_id_pages_using_pdf_get"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling A11YNextGenApi.sites_site_id_a11y_validation_pdfs_pdf_id_pages_using_pdf_get, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_validation_pdfs_pdf_id_pages_using_pdf_get, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling A11YNextGenApi.sites_site_id_a11y_validation_pdfs_pdf_id_pages_using_pdf_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/sites/{site_id}/a11y/validation/pdfs/{pdf_id}/pages_using_pdf'.sub('{' + 'site_id' + '}', CGI.escape(site_id.to_s)).sub('{' + 'pdf_id' + '}', CGI.escape(pdf_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReferringPageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic_auth']

      new_options = opts.merge(
        :operation => :"A11YNextGenApi.sites_site_id_a11y_validation_pdfs_pdf_id_pages_using_pdf_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: A11YNextGenApi#sites_site_id_a11y_validation_pdfs_pdf_id_pages_using_pdf_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
