=begin
#Siteimprove API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::GeneralApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'GeneralApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::GeneralApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GeneralApi' do
    it 'should create an instance of GeneralApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::GeneralApi)
    end
  end

  # unit tests for ping_account_get
  # Test your access to the API service
  # Returns \&quot;OK\&quot; if the supplied account credentials gives access to the API endpoints.
  # @param [Hash] opts the optional parameters
  # @return [PingAccount]
  describe 'ping_account_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for ping_api_get
  # Test the connectivity to the API service
  # Returns \&quot;OK\&quot; if the server is alive.
  # @param [Hash] opts the optional parameters
  # @return [PingApi]
  describe 'ping_api_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for root_get
  # API Root
  # Entry point to traverse the API endpoints.
  # @param [Hash] opts the optional parameters
  # @return [Account]
  describe 'root_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for settings_content_checking_get
  # Get content-check settings
  # Get information about the content-check functionality. This is useful for checking whether the content-check functionality has been enabled yet.
  # @param [Hash] opts the optional parameters
  # @return [ContentCheckSettings]
  describe 'settings_content_checking_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for settings_content_checking_post
  # Enable content-check for this account
  # This will enable content-checking for the account. No content-checking can be performed before this has been called to enable it. It may take a while to fully enable this feature - possibly several minutes. After enabling content-check using this endpoint, the corresponding GET endpoint can be polled to check for when content-check has been completely enabled and is ready to start accepting content-checks. Like so:      POST /settings/content_checking     Poll GET /settings/content_checking until content-check is ready     Now you can check content
  # @param [Hash] opts the optional parameters
  # @return [ProductsPolicyArchivedPoliciesPolicyIdUnarchivePost200Response]
  describe 'settings_content_checking_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for settings_get
  # Get settings
  # Overview of top-level settings endpoints.
  # @param [Hash] opts the optional parameters
  # @return [AccountSettings]
  describe 'settings_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for settings_surveys_get
  # Get surveys
  # Get a list of feedback surveys for this account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @return [FeedbackSurveyList]
  describe 'settings_surveys_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for settings_users_get
  # Get users
  # Get a list of users for this account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @return [UserList]
  describe 'settings_users_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_get
  # Get sites
  # Get a list of sites for this account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @return [SiteList]
  describe 'sites_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_post
  # Creates a site
  # Creates a site with the specified argument values
  # @param name Site name
  # @param url Url of the site
  # @param [Hash] opts the optional parameters
  # @return [SiteCreateResult]
  describe 'sites_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_dci_history_get
  # Get history.
  # Get history endpoints for Dci, Seo, Accessibility and Qa-Score
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @return [DciOverallScoreHistoryItemList]
  describe 'sites_site_id_dci_history_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_dci_overview_get
  # Get DCI scores
  # Get all DCI scores associated with this site.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page_id Id for specific page.
  # @return [DciOverallScore]
  describe 'sites_site_id_dci_overview_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_get
  # Get list of top level endpoints for site
  # List of all the possible top-end endpoints, grouped by products and sections.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @return [Site2]
  describe 'sites_site_id_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for utilization_get
  # Get the utilizations of the account
  # Get the utilizations for this account.
  # @param [Hash] opts the optional parameters
  # @return [AccountUtilization]
  describe 'utilization_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
