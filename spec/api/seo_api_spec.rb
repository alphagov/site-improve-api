=begin
#Siteimprove API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'spec_helper'
require 'json'

# Unit tests for SiteImproveApiClient::SEOApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'SEOApi' do
  before do
    # run before each test
    @api_instance = SiteImproveApiClient::SEOApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SEOApi' do
    it 'should create an instance of SEOApi' do
      expect(@api_instance).to be_instance_of(SiteImproveApiClient::SEOApi)
    end
  end

  # unit tests for sites_site_id_seo_decisions_ignored_issues_get
  # Get ignored issues from decisions
  # Get specific issues that have been ignored within the SEO service. This includes issues that have been ignored on all pages (Global decision) and individual pages.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @return [IgnoredIssuesList]
  describe 'sites_site_id_seo_decisions_ignored_issues_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_decisions_ignored_issues_pages_get
  # Get ignored issue&#39;s pages from decisions
  # Get all pages affected by a specific issue.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :seo_issue Issue filter.
  # @return [IgnoredIssuesDetailsList]
  describe 'sites_site_id_seo_decisions_ignored_issues_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_decisions_ignored_pages_get
  # Get ignored pages from decisions
  # Get pages have been ignored within the SEO service.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @option opts [String] :search_in Specified query must match either url or title.
  # @return [IgnoredPagesList]
  describe 'sites_site_id_seo_decisions_ignored_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_get
  # Get \&quot;duplicate H1 headings\&quot; from issues
  # Get issues of two or more pages that share the same H1 heading. The H1 heading is the main heading on the page and it defines the semantic relationship between the words in the heading and the words that follow it.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @return [DuplicateH1HeadingList]
  describe 'sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_h1heading_id_pages_get
  # Get pages for \&quot;duplicate H1 headings\&quot; from issues
  # Get all pages that have duplicate H1 headings.
  # @param site_id Id for specific site.
  # @param h1heading_id Id for specific H1 heading.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @return [DuplicateH1HeadingDetailsList]
  describe 'sites_site_id_seo_issues_duplicate_h1_headings_h1_headings_h1heading_id_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_get
  # Get \&quot;duplicate meta descriptions\&quot; from issues
  # Two or more pages share the same meta description. The meta description is your opportunity to advertise the content of the page and make searchers want to click it in the search engine results pages.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @return [DuplicateMetaDescriptionList]
  describe 'sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_meta_name_id_meta_content_id_pages_get
  # Get pages with \&quot;duplicate meta descriptions\&quot; from issues
  # Get all pages that have duplicate meta descriptions.
  # @param site_id Id for specific site.
  # @param meta_name_id Id for specific meta name.
  # @param meta_content_id Id for specific meta content.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @return [DuplicateMetaDescriptionDetailsList]
  describe 'sites_site_id_seo_issues_duplicate_meta_descriptions_meta_descriptions_meta_name_id_meta_content_id_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_duplicate_page_title_titles_get
  # Get \&quot;duplicate page titles\&quot; from issues
  # Two or more pages share the same page title. This may cause the pages to compete against each other and weaken search engine optimisation.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @return [DuplicatePageTitlesList]
  describe 'sites_site_id_seo_issues_duplicate_page_title_titles_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_duplicate_page_title_titles_pages_get
  # Get pages for \&quot;duplicate page titles\&quot; from issues
  # Get all pages that have duplicate page titles.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :title URL escaped title of page.
  # @return [DuplicatePageTitleDetailsList]
  describe 'sites_site_id_seo_issues_duplicate_page_title_titles_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_get
  # Get issues
  # Get all SEO issues on your website.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :responsibility Responsibility filter
  # @option opts [String] :severity Severity filter.
  # @return [SeoIssueList]
  describe 'sites_site_id_seo_issues_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_keyword_not_included_in_h1_heading_pages_get
  # Get pages for \&quot;keyword not included in h1\&quot; from issues
  # The H1 heading is the main heading on the page and it defines the semantic relationship between the words in the heading and the words that follow it.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @option opts [String] :search_in Specified query must match either url or title.
  # @return [KeywordNotIncludedInH1HeadingList]
  describe 'sites_site_id_seo_issues_keyword_not_included_in_h1_heading_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_keyword_not_included_in_image_alt_text_pages_get
  # Get pages for \&quot;keyword not included in image alt text\&quot; from issues
  # The keyword is not included in any of the image alt texts in the page. Including important keywords in the alt text of a relevant image helps both the regular search engine optimization and optimization in image searches.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @option opts [String] :search_in Specified query must match either url or title.
  # @return [KeywordNotIncludedInImageAltTextList]
  describe 'sites_site_id_seo_issues_keyword_not_included_in_image_alt_text_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_get
  # Get pages for \&quot;keyword not included in internal link text\&quot; from issues
  # This will return the pages for this particular SEO issue.  The keyword is not included in any of the link texts used to link to the page. When the keyword is used in the link text (the visible part of the links you click on to get to the page), it helps both users and search engines to understand what the page is about. 
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @option opts [String] :search_in Specified query must match either url or title.
  # @return [KeywordNotIncludedInInternalLinkTextList]
  describe 'sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_get
  # Get link texts for \&quot;keyword not included in internal link text\&quot; from issues
  # This will return the link texts for this particular SEO issue.  The keyword is not included in any of the link texts used to link to the page. When the keyword is used in the link text (the visible part of the links you click on to get to the page), it helps both users and search engines to understand what the page is about. 
  # @param site_id Id for specific site.
  # @param page_id Id for specific page.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @return [KeywordNotIncludedInInternalLinkTextDetailsList]
  describe 'sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_link_text_id_referring_pages_get
  # Get referring pages to link text for \&quot;keyword not included in internal link text\&quot; from issues
  # This will return the referring pages to the specific link text on for this particular SEO issue.  The keyword is not included in any of the link texts used to link to the page. When the keyword is used in the link text (the visible part of the links you click on to get to the page), it helps both users and search engines to understand what the page is about. 
  # @param site_id Id for specific site.
  # @param page_id Id for specific page.
  # @param link_text_id Id for specific link text.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @return [KeywordNotIncludedInInternalLinkTextReferringPagesList]
  describe 'sites_site_id_seo_issues_keyword_not_included_in_internal_link_text_pages_page_id_link_texts_link_text_id_referring_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_keyword_not_included_in_meta_description_pages_get
  # Get pages for \&quot;keyword not included in meta description\&quot; from issues
  # The meta description is your opportunity to advertise the content of the page and make searchers want to click it in the search engine result pages. The likelihood of a user choosing this page is greatly improved if the keyword they have searched for appears in the text.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @option opts [String] :search_in Specified query must match either url or title.
  # @return [KeywordNotIncludedInMetaDescriptionList]
  describe 'sites_site_id_seo_issues_keyword_not_included_in_meta_description_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_keyword_not_included_in_page_title_pages_get
  # Get pages for \&quot;keyword not included in page title\&quot; from issues
  # The keyword is not included in the page title. The page title is the single most important place to include your keyword on page.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @option opts [String] :search_in Specified query must match either url or title.
  # @return [KeywordNotIncludedInPageTitleList]
  describe 'sites_site_id_seo_issues_keyword_not_included_in_page_title_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_keyword_not_included_in_sub_headings_pages_get
  # Get pages for \&quot;keyword not included in sub headings\&quot; from issues
  # Heading tags are used to structure your content and make it easier for users as well as search engines to scan and understand what the page is about. Subheadings (H2, H3, ...) follow the H1 heading and together they form the outline of the page’s content.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @option opts [String] :search_in Specified query must match either url or title.
  # @return [KeywordNotIncludedInSubHeadingsList]
  describe 'sites_site_id_seo_issues_keyword_not_included_in_sub_headings_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_keyword_not_included_in_url_pages_get
  # Get pages for \&quot;keyword not included in url\&quot; from issues
  # When the keyword is included in the page&#39;s URL, it tells both users and search engines what the page is about. When the URL is used as link text on other websites linking to this page, it provides even more value if the keyword is included in the URL.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @option opts [String] :search_in Specified query must match either url or title.
  # @return [KeywordNotIncludedInUrlList]
  describe 'sites_site_id_seo_issues_keyword_not_included_in_url_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_get
  # Get pages for \&quot;pages excluded by noindex/nofollow\&quot; from issues
  # Blocking pages by noindex/nofollow is a way to keep pages accessible to users navigating the website but out of search results pages.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @option opts [String] :search_in Specified query must match either url or title.
  # @return [PageExcludedByNoindexNofollowList]
  describe 'sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_page_id_referring_pages_get
  # Get referring pages for \&quot;pages excluded by noindex/nofollow\&quot; from issues
  # Get all referring pages to this particular page.
  # @param site_id Id for specific site.
  # @param page_id Id for specific page.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @return [ReferringPageList1]
  describe 'sites_site_id_seo_issues_page_excluded_by_noindex_nofollow_pages_page_id_referring_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_page_excluded_by_rel_canonical_pages_get
  # Get pages for \&quot;page excluded by rel&#x3D;canonical\&quot; from issues
  # Blocking pages by rel&#x3D;canonical is a way to keep duplicate pages accessible to users navigating the website but keep them out of search result pages.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @option opts [String] :search_in Specified query must match either url or title.
  # @return [PageExcludedByRelCanonicalList]
  describe 'sites_site_id_seo_issues_page_excluded_by_rel_canonical_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_page_excluded_by_robots_pages_get
  # Get pages for \&quot;pages excluded by robots.txt\&quot; from issues
  # Robots.txt is a text file at the top-level directory of a web server that tells search engines not to crawl certain URLs.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @option opts [String] :search_in Specified query must match either url or title.
  # @return [PageExcludedByRobotsList]
  describe 'sites_site_id_seo_issues_page_excluded_by_robots_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_page_not_included_in_xml_sitemap_pages_get
  # Get pages for \&quot;page not included in xml sitemap\&quot; from issues
  # Pages that are not included in the website’s XML Sitemap. The XML Sitemap informs search engines about pages on the website that are available for crawling in order to help them crawl and index the website more intelligently.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @option opts [String] :search_in Specified query must match either url or title.
  # @return [PageNotIncludedInXmlSitemapList]
  describe 'sites_site_id_seo_issues_page_not_included_in_xml_sitemap_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_pages_without_h1_heading_pages_get
  # Get pages for \&quot;pages without h1 headings\&quot; from issues
  # The H1 heading is the main heading on the page and it defines the semantic relationship between the words in the heading and the words that follow it.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @option opts [String] :search_in Specified query must match either url or title.
  # @return [PagesWithoutH1HeadingList]
  describe 'sites_site_id_seo_issues_pages_without_h1_heading_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_pages_without_meta_description_pages_get
  # Get pages for \&quot;pages without meta descriptions\&quot; from issues
  # The meta description is your opportunity to advertise the content of the page and make searchers want to click it in the search engine results pages.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @option opts [String] :search_in Specified query must match either url or title.
  # @return [PagesWithoutMetaDescriptionList]
  describe 'sites_site_id_seo_issues_pages_without_meta_description_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_pages_without_page_title_pages_get
  # Get pages for \&quot;pages without page title\&quot; from issues
  # When a page has no page title it makes it difficult for search engines to determine what the page is about.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @return [PagesWithoutPageTitleList]
  describe 'sites_site_id_seo_issues_pages_without_page_title_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_redirect_links_get
  # Get redirect links from issues
  # A 302 redirect is a temporary redirect that sends users and search engines - but not ranking power - to the new URL. It should only be used for content that has been moved to a new location temporarily.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @option opts [String] :search_in Specified query must match either url or title.
  # @return [RedirectRequestDetailsList]
  describe 'sites_site_id_seo_issues_redirect_links_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_issues_redirect_links_link_id_steps_get
  # Get redirection steps in redirect links from issues
  # Get the entire list of redirections involved, from the start page to the end page.
  # @param site_id Id for specific site.
  # @param link_id Id of a specific link/URL.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @return [RedirectChainRequestDetailsList]
  describe 'sites_site_id_seo_issues_redirect_links_link_id_steps_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_overview_groups_get
  # Get SEO groups
  # Groups are used to display information for specific sections of the website. Only groups that are visible under your profile are returned.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @return [SeoGroupOverviewDetailsList]
  describe 'sites_site_id_seo_overview_groups_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_overview_policies_get
  # Get SEO policies
  # Policies created within the Policy service that have been chosen to be displayed within SEO
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @return [ExecutedPolicyList]
  describe 'sites_site_id_seo_overview_policies_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_overview_summary_get
  # Get summary for SEO
  # Get overall summary of the issues identified by SEO.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @return [SeoSummaryIssueList]
  describe 'sites_site_id_seo_overview_summary_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_pages_get
  # Get pages
  # Get all pages that are being checked for SEO issues, including pages that are being optimised for a specific keyword.
  # @param site_id Id for specific site.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Array<Integer>] :ids Return all items that is one of the listed identifiers.  Values are separated by comma, as in ids&#x3D;1,2,3.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @option opts [String] :query Return all items that matches the specified plain text query.
  # @option opts [String] :search_in Specified query must match either url or title.
  # @return [SeoPageList]
  describe 'sites_site_id_seo_pages_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for sites_site_id_seo_pages_page_id_issues_get
  # Get issues for page
  # Get SEO issues for a specific page.
  # @param site_id Id for specific site.
  # @param page_id Id for specific page.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :group_id Id for specific group.
  # @option opts [Integer] :page Page number to show when more than one page in paged output.
  # @option opts [Integer] :page_size Number of items/records per page in paged output.
  # @return [SeoPageIssueDetailsList]
  describe 'sites_site_id_seo_pages_page_id_issues_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
